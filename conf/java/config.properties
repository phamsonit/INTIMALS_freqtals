#JAVA configuration

inputPath = input

#outputPath = output/jh-7.2-7.3-inter-2step-score0.4-60m
#outputPath = output/checkstyle-new
outputPath = output/antlr-4.7-4.8-score0.1
#----------------------------------------------------
#input 2-class data ?
2Class = true

#path of old version
inputPath1 = antlr-4.7
#inputPath1 = checkstyle-8.20

#path of new version
inputPath2 = antlr-4.8
#inputPath2 = checkstyle-8.25

#minimum discriminative score
minDSScore = 0.1

#keep highest score pattern. if keepHighestScore = false output maximal patterns
keepHighestScore = false

#number of highest score patterns at the end
numPatterns = 1000

#----------------------------------------------------

#timeout (minutes)
timeout = 60

#leaf size constraints: using in the first step to limit the size of the search space
minLeaf = 1
maxLeaf = 3

#node size constraints: using to remove small patterns
minNode = 20

#mining patterns method :
twoStep = true
# true  - using 2 steps to mine maximal patterns:
    # step 1: find frequent maximal patterns with size constraints
    # step 2: grown frequent pattern to find maximal patterns
# false - find maximal patterns in 1 step

#----------------------------------------------------
#abstract leaf label.
abstractLeafs=false
# true  - replace all leaf labels by **
# false - using leaf labels

#build grammar: true - build grammar from input data; false - read grammar from given file
buildGrammar=true
#file contains a list of root labels
rootLabelFile=conf/java/listRootLabel.txt
#file contains a list of label that only allow in patterns
whiteLabelFile=conf/java/listWhiteLabel.txt
#file contains a list of xml characters
xmlCharacterFile=conf/java/xmlCharacters.txt

#----------------------------------------------------
#configurations for running parallel:
#list of minimum support thresholds
minSupportList=3
#list of folders: note - there is no space between folders
inFilesList=sample_data1,sample_data2